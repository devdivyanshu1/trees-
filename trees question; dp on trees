https://drive.google.com/file/d/12Gihp7XScmHPbL34BtdzUce9qW4bbxx4/view




#include <bits/stdc++.h>
using namespace std;

#include <bits/stdc++.h>
using namespace std;
typedef long long int ll ; 
ll imp_sum[500000+5];
ll dp[500000+5];ll b[500000+5];ll k;

void DFS(int node,vector <int> G[],int used[],int parent[]){
 
 
 
    for(auto u: G[node]){ //iterating all children "u" of "node"
 
        if(parent[node]!=u){
            //if this node/branch has never been visited before 
            //just go into it and search it using dfs in recursion
            parent[u] = node ; 
            DFS(u,G,used,parent);
 
        }
    }
 
 
    //print(node)--->parent
    //----> bottom up traversal 
    ll h = 0 ; ll small = 1e18 ; ll v = 0 ;
    for(auto child: G[node]){
 
        if(child==parent[node]){
            //it means the child node is parent of the node
            //it is not the child
            //ignore it
        }
 
        else{ h++;
            small = min(small,imp_sum[child]); v = v + dp[child];
        }
    }
 
    if(h==0){
        imp_sum[node] = b[node];dp[node] = 0; //RRRRR
    }
    else{ 
        ll g = b[node] + small; 
        if(g<=k){
            imp_sum[node] = g ; 
            dp[node] = v + h - 1 ; 
        }
        else{
            imp_sum[node] = b[node];
            dp[node] = v + h ; 
        }
    }
   
}
 
int main(){
    int n,m; 
    cin>>n>>m>>k; 
    vector <int> G[n+1];
 
    for(int i=1;i<=n;i++){
        
        cin>>b[i];
    }
    int i = 2 ; 
    while(i<=n){
        int u,v;
        u = i ; 
        cin>>v ; 
        G[u].push_back(v);
        G[v].push_back(u); 
        i++;
    }
    int used[n+1] = {0};
    int parent[n+1] = {0};
    DFS(1,G,used,parent);   
 
    if(dp[1]<=m){ cout<<dp[1] + 1;
        
    }else{
        
        cout<<"-1";
    }
}
